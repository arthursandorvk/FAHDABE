/*
 * keygenAA.h
 *
 *  Created on: Apr 19, 2023
 *      Author: Arthur Sandor
 */

# include <bswabe.h>

/* Typedef definitions */

/* 
 * Attribute Authority Secret Key Component 
 */
typedef struct arsanvkabe_AA_secret_key_s skAA_t;


/* 
 * Data Owner Secret Key Component 
 */
typedef struct arsanvkabe_prv_do_s arsanvkabe_prv_do_t;



/*
 * Second stage ciphertext generated by Resource-Rich Device (RRD)
 */ 
typedef struct arsanvkabe_cph_RRD_s arsanvkabe_cph_RRD_t;


/*
 * user public subkey sent to the resource-rich device 
 * to realize partial decryption (by extension applying revocation updates) 
 */
typedef struct arsanvkabe_user_rrd_subkey_s user_RRD_t;


/*
 * user private key in fahdabe
 */
typedef struct arsanvkabe_prv_user_s arsanvkabe_prv_user_t;


/*
 * Resource-Rich Device Component in fahdabe to aggregate all the Attribute 
 *  Authority Secret Key Components belonging to a specific data user (DU) (an array of skAA_t)
 */
typedef struct arsanvkabe_RRD_key_s arsanvkabe_RRD_key_t;


/*
 * User public subkey sent to the resource-rich device 
 * to realize partial decryption (by extension applying revocation updates) 
 */
typedef struct arsanvkabe_user_rrd_subkey_s user_RRD_t;


/*
 * Dummy attribute structure in FAHDABE
 */
typedef struct arsanvkabe_prv_comp_s arsanvkabe_prv_comp_t;


/*
 * DO structure for attribute masking factor epsilon
 */
typedef struct arsanvkabe_epsilon_s arsanvkabe_epsilon_t;


/*
* RRD key component
*/
typedef struct arsanvkabe_RRD_key_s arsanvkabe_RRD_key_t;


/*
* Attribute Authority Secret Component 
*/
typedef struct arsanvkabe_AA_secret_key_s skAA_t;



/*
 * To unserialize the RRD key
 */
arsanvkabe_RRD_key_t* arsanvkabe_prv_rrdKey_unserialize (bswabe_pub_t* pub, GByteArray* b, int free);


/*
 * To serialize DU_Out_key (struct arsanvkabe_rrd_key_s (User_RRD_t)), which is the user's public subkey, to a GByteArray
 */
GByteArray* arsanvkabe_User_RRD_subKey_serialize(user_RRD_t* DU_Out_key);


/*
 * To unserialize the DU_Out_key (struct arsanvkabe_rrd_key_s (User_RRD_t)), which is the user's public subkey, from a GByteArray
 */
user_RRD_t* arsanvkabe_User_RRD_subKey_unserialize(bswabe_pub_t* pub, GByteArray* b, int free);


/* 
 *to free the public user subkey 
 */
void user_RRD_t_free(user_RRD_t* DU_Out_key);


/*
 * To realize (outsourced) partial decryption by the resource-rich device
 * DU_Out_key serves as a subkey of the user complete secret key that can be outsourced (without security concerns)
 * to realize partial decryption; DU_Out_key is generated by the Data user itself.
 */
 int arsanvkabe_decryptCT_RRD( bswabe_pub_t* pub, user_RRD_t* DU_Out_key, arsanvkabe_cph_RRD_t* cph_rrd, element_t T, element_t I );


/*
 * To unserialize the second stage ciphertext arsanvkabe_cph_RRD_t ciphertext CT_RRD from a GBYteArray
 */
arsanvkabe_cph_RRD_t* arsanvkabe_cph_RRD_unserialize(bswabe_pub_t* pub, GByteArray* b, int free );


/*
 * Generation of first stage of ciphertext under DO encryption
 */
arsanvkabe_cph_DO_t* arsanvkabe_encryptCT_DO( bswabe_pub_t* pub, element_t m, char* policy, element_t  dummy_attribute_element);


/*
 * To unserialize the DU_Out_key (struct arsanvkabe_rrd_key_s (User_RRD_t)), which is the user's public subkey, from a GByteArray
 */
user_RRD_t* arsanvkabe_User_RRD_subKey_unserialize(bswabe_pub_t* pub, GByteArray* b, int free);


/* To free the public user subkey */
void user_RRD_t_free(user_RRD_t* DU_Out_key);


/*
 * To realize (outsourced) partial decryption by the resource-rich device
 * DU_Out_key serves as a subkey of the user complete secret key that can be outsourced (without security concerns)
 * to realize partial decryption; DU_Out_key is generated by the Data user itself.
 */
 int arsanvkabe_decryptCT_RRD( bswabe_pub_t* pub, user_RRD_t* DU_Out_key, arsanvkabe_cph_RRD_t* cph_rrd, element_t T, element_t I );


/*
 *To allow Data users to hide their attributes prior to requesting attribute keys from AAs
 */
char** arsanvkabe_hide_attribute(bswabe_pub_t* pub, char** attributes);

/*
 * To generate DO structure for attribute masking factor epsilon
 */
arsanvkabe_epsilon_t* arsanvkabe_keygenEpsilon( bswabe_pub_t* pub, char* epsilon_string_value );


/*
 *  Generate the private key D with the public key, the master key, the dummy attribute and the attribute masking factor epsilon 
 */
arsanvkabe_prv_do_t* arsanvkabe_keygenDO( bswabe_pub_t* pub, bswabe_msk_t* msk, char** dummy_attributes, arsanvkabe_epsilon_t* do_epsilon );


arsanvkabe_RRD_key_t* arsanvkabe_keygenRRD(bswabe_pub_t* pub, GArray *fileAAList, element_t du_blind);

GByteArray* arsanvkabe_prv_rrdKey_serialize(arsanvkabe_RRD_key_t* rrd_key);

void arsanvkabe_RRD_key_t_free(arsanvkabe_RRD_key_t* rrd_key);

