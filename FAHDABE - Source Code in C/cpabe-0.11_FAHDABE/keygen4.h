/*
 * keygen3.h
 *
 *  Created on: Nov 23, 2023
 *      Author: Arthur Sandor
 */



/* Attribute related structure */
struct bswabe_prv_comp_t
{
	/* these actually get serialized */
	char* attr;
	element_t d;  /* G_2 */ //C_j
	element_t dp; /* G_2 */ //C_j'

	/* only used during dec (only by dec_merge) */
	int used;
	element_t z;  /* G_1 */
	element_t zp; /* G_1 */
};



/* 
 * Data Owner Secret Key Component 
 */
struct arsanvkabe_prv_do_s
{
	element_t d;   /*G_2*/ 
	element_t du_blind; /*G_2*/
	element_t hkey; //helper key g^{\gamma / \beta}
	char* epsilon_digest_string; /* H2(epsilon) */ 
	GArray* dummy_attr_array; /* arsanvkabe_prv_comp_t's */ //Array of dummy attributes (only one in this work)
};




/*
 *RRD key made of a GByteArray of AAKeys
 */
struct arsanvkabe_RRD_key_s
{
	GArray* AAkey_array;
};


/*
 * Complete user secret key
 */
struct arsanvkabe_prv_user_s
{
	arsanvkabe_prv_do_t* D; /* partial key issued by DO*/
	arsanvkabe_RRD_key_t* U; /* bswabe_prv_comp_t's */
};

/*
 * User public subkey DO_Out_key sent to RRD for policy evaluation and partial decryption
 */
struct arsanvkabe_user_rrd_subkey_s
{
	element_t dr;   /* G_2 */ //dr = g^{gamma/beta}
	arsanvkabe_RRD_key_t* rrd_key; // struct arsanvkabe_RRD_key_s = GArray of bswabe_prv_comp_t

	/* Parameters related to the Dummy Attribute */
	element_t d_attd; /* G_2 */ // d_attd = g^{r+gamma}.H1(H2(attd + epsilon))^{r2}, where attd is the dummy attribute
	element_t t_attd  /* G_1 */ // t_attd = g^{r2}
};	


struct arsanvkabe_prv_comp_s
{
	/* these actually get serialized */
	char* attr; //char*
	element_t d;  /* G_2 */ //C_j
	element_t dp; /* G_1 */ //C_j'
};


/*
 *Attribute Authority Secret Key Component
 */
struct arsanvkabe_AA_secret_key_s
{
	GArray* skAA;
};


/*
 * user private key in fahdabe
 */
typedef struct arsanvkabe_prv_user_s arsanvkabe_prv_user_t;


/*
 * Resource-Rich Device Component in fahdabe to aggregate all the Attribute 
 *  Authority Secret Key Components belonging to a specific data user (DU) (an array of skAA_t)
 */
typedef struct arsanvkabe_RRD_key_s arsanvkabe_RRD_key_t;

/*
 * Attribute Authority Secret Component
 */
typedef struct arsanvkabe_AA_secret_key_s skAA_t;

/*
 * user public subkey sent to the resource-rich device 
 * to realize partial decryption (by extension applying revocation updates) 
 */
typedef struct arsanvkabe_user_rrd_subkey_s user_RRD_t;


/*
 * dummy attribute structure in FAHDABE
 */
typedef struct arsanvkabe_prv_comp_s arsanvkabe_prv_comp_t;


/*
 * second stage ciphertext generated by Resource-Rich Device (RRD) remote encryption in fahdabe
 */
typedef struct arsanvkabe_cph_RRD_s arsanvkabe_cph_RRD_t;


/*
 * To unserialize the RRD key
 */
arsanvkabe_RRD_key_t* arsanvkabe_prv_rrdKey_unserialize (bswabe_pub_t* pub, GByteArray* b, int free);


/*
 * To serialize DU_Out_key (struct arsanvkabe_rrd_key_s (User_RRD_t)), which is the user's public subkey, to a GByteArray
 */
GByteArray* arsanvkabe_User_RRD_subKey_serialize(user_RRD_t* DU_Out_key);


/* 
 * To free the public user subkey 
 */
void user_RRD_t_free(user_RRD_t* DU_Out_key);


/* 
 * To free the complete user key 
 */
void arsanvkabe_prv_user_t_free(arsanvkabe_prv_user_t* userSK);



/* 
 * To free a dummy attribute struct variable arsanvkabe_prv_comp_t 
 */
void arsanvkabe_prv_comp_t_free( arsanvkabe_prv_comp_t* dummy_attr );
